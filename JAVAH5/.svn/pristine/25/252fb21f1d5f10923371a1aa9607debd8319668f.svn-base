package com.mzj.eagle.wechat.portal.common;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 全局公用方法
 * @author haojunhong
 * @date 2017年12月2日
 */
public class GlobalMethodUtil {

	private static final Logger LOG = LoggerFactory.getLogger(GlobalMethodUtil.class);
	private static final String DEFAULT_SECRET_KEY = "db5c7ed2-af94-46fe-a05d-40efdb4a77c9";// 默认密钥
	
	
	/**
	 * 转换解密字符为Map对象
	 * @param decry	解密后的字符
	 * @return	map
	 */
	public Map<String, String> getParams(String decry) {
		if(StringUtils.isEmpty(decry))
			return null;
		Map<String, String> map = new HashMap<String, String>();
		String[] strs = decry.split("&");
		for (String str : strs) {
			if (StringUtils.isNotEmpty(str) && str.startsWith("accountId")) {
				map.put("accountId", str.substring("accountId".length() + 1, str.length()));
			} else if (StringUtils.isNotEmpty(str) && str.startsWith("openId")) {
				map.put("openId", str.substring("openId".length() + 1, str.length()));
			} else if (StringUtils.isNotEmpty(str) && str.startsWith("recordId")) {
				map.put("recordId", str.substring("recordId".length() + 1, str.length()));
			} else if (StringUtils.isNotEmpty(str) && str.startsWith("weightChange")) {
				String wchange = str.substring("weightChange".length() + 1, str.length());
				DecimalFormat df = new DecimalFormat("0.00");
				String change = df.format(Double.valueOf(wchange));
				map.put("weightChange", change);
			} else if (StringUtils.isNotEmpty(str) && str.startsWith("weight")) {
				str = str.replace("kg", "");
				map.put("weight", str.substring("weight".length() + 1, str.length()));
			}else if (StringUtils.isNotEmpty(str) && str.startsWith("appId")) {
				map.put("appId", str.substring("appId".length() + 1, str.length()));
			}
		}

		return map;
	}
	
	/**
	 * 解密方法
	 * @param content	加密字符
	 * @return	解密后的字符
	 */
	public String decrypt(String content) {
		try {
			byte[] contentByte = parseHexStr2Byte(content);
			KeyGenerator kgen = KeyGenerator.getInstance("AES");
			SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
			secureRandom.setSeed(DEFAULT_SECRET_KEY.getBytes());
			kgen.init(128, secureRandom);
			SecretKey secretKey = kgen.generateKey();
			byte[] enCodeFormat = secretKey.getEncoded();
			SecretKeySpec key = new SecretKeySpec(enCodeFormat, "AES");
			Cipher cipher = Cipher.getInstance("AES");// 创建密码器
			cipher.init(Cipher.DECRYPT_MODE, key);// 初始化
			byte[] result = cipher.doFinal(contentByte);
			return new String(result); // 加密
		} catch (NoSuchAlgorithmException e) {
			LOG.error(e.getMessage(), e);
		} catch (NoSuchPaddingException e) {
			LOG.error(e.getMessage(), e);
		} catch (InvalidKeyException e) {
			LOG.error(e.getMessage(), e);
		} catch (IllegalBlockSizeException e) {
			LOG.error(e.getMessage(), e);
		} catch (BadPaddingException e) {
			LOG.error(e.getMessage(), e);
		}
		return null;
	}
	
	/**
	 * 加密字符转换byte数组
	 * @param hexStr 加密字符串
	 * @return	byte数组
	 */
	private byte[] parseHexStr2Byte(String hexStr) {
		if (hexStr.length() < 1)
			return null;
		byte[] result = new byte[hexStr.length() / 2];
		for (int i = 0; i < hexStr.length() / 2; i++) {
			int high = Integer.parseInt(hexStr.substring(i * 2, i * 2 + 1), 16);
			int low = Integer.parseInt(hexStr.substring(i * 2 + 1, i * 2 + 2), 16);
			result[i] = (byte) (high * 16 + low);
		}
		return result;
	}
	
}
