package com.mzj.eagle.wechat.portal.health.controller;

import com.alibaba.fastjson.JSONObject;
import com.mzj.eagle.wechat.portal.common.GlobalMethodUtil;
import com.mzj.eagle.wechat.portal.profile.controller.ProfileController;
import com.mzj.eagle.wechat.portal.profile.service.UserInfoService;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.mzj.eagle.wechat.portal.vo.UserInfoVo;
import com.mzj.eagle.wechat.portal.vo.UserWeightVo;
import com.mzj.eagle.wechat.portal.vo.WeChatUserVo;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;

@Configuration
@Controller
public class HealthController {
	private static final Logger LOG = LoggerFactory.getLogger(ProfileController.class);
	@Autowired
	private UserInfoService userInfoService;

	private static final String DEFAULT_SECRET_KEY = "db5c7ed2-af94-46fe-a05d-40efdb4a77c9";// 默认密钥
	
	//健康分析
	@RequestMapping(value= "health.html",method=RequestMethod.GET)
	public String health(@RequestParam(name = "_p") String p,ModelMap map){
			String decry = decrypt(p);
			Map<String, String> paraMap = getParams(decry);
			String openId = paraMap.get("openId");
			String weight = paraMap.get("weight");
			WeChatUserVo weChatVo = userInfoService.getOpenId(openId);
			UserInfoVo userInfo = null;
			if(weChatVo!=null && !StringUtils.isEmpty(weChatVo.getUnionid())) {
				userInfo = userInfoService.getById(weChatVo.getUnionid());
			} else {
				userInfo = new UserInfoVo();
			}
		if(weChatVo.getGender()!=1 && weChatVo.getGender()!=2){
			weChatVo.setGender(1);
		}
			map.put("weChatVo",weChatVo);
			map.put("userInfo",userInfo);
			map.put("weight",weight);

		return "health/health";
	}

	private String decrypt(String content) {
		try {
			// byte[] contentByte = parseHexStr2Byte(content);
			byte[] contentByte = parseHexStr2Byte(content);
			KeyGenerator kgen = KeyGenerator.getInstance("AES");
			SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
			secureRandom.setSeed(DEFAULT_SECRET_KEY.getBytes());
			kgen.init(128, secureRandom);
			SecretKey secretKey = kgen.generateKey();
			byte[] enCodeFormat = secretKey.getEncoded();
			SecretKeySpec key = new SecretKeySpec(enCodeFormat, "AES");
			Cipher cipher = Cipher.getInstance("AES");// 创建密码器
			cipher.init(Cipher.DECRYPT_MODE, key);// 初始化
			byte[] result = cipher.doFinal(contentByte);
			return new String(result); // 加密
		} catch (NoSuchAlgorithmException e) {
			LOG.error(e.getMessage(), e);
		} catch (NoSuchPaddingException e) {
			LOG.error(e.getMessage(), e);
		} catch (InvalidKeyException e) {
			LOG.error(e.getMessage(), e);
		} catch (IllegalBlockSizeException e) {
			LOG.error(e.getMessage(), e);
		} catch (BadPaddingException e) {
			LOG.error(e.getMessage(), e);
		}
		return null;
	}

	private Map<String, String> getParams(String decry) {

		Map<String, String> map = new HashMap<String, String>();
		String[] strs = decry.split("&");
		for (String str : strs) {
			if (StringUtils.isNotEmpty(str) && str.startsWith("accountId")) {
				map.put("accountId", str.substring("accountId".length() + 1, str.length()));
			} else if (StringUtils.isNotEmpty(str) && str.startsWith("openId")) {
				map.put("openId", str.substring("openId".length() + 1, str.length()));
			} else if (StringUtils.isNotEmpty(str) && str.startsWith("recordId")) {
				map.put("recordId", str.substring("recordId".length() + 1, str.length()));
			} else if (StringUtils.isNotEmpty(str) && str.startsWith("weightChange")) {
				String wchange = str.substring("weightChange".length() + 1, str.length());
				DecimalFormat df = new DecimalFormat("0.00");
				String change = df.format(Double.valueOf(wchange));
				map.put("weightChange", change);
			} else if (StringUtils.isNotEmpty(str) && str.startsWith("weight")) {
				str = str.replace("kg", "");
				map.put("weight", str.substring("weight".length() + 1, str.length()));
			}
		}

		return map;
	}

	private byte[] parseHexStr2Byte(String hexStr) {
		if (hexStr.length() < 1)
			return null;
		byte[] result = new byte[hexStr.length() / 2];
		for (int i = 0; i < hexStr.length() / 2; i++) {
			int high = Integer.parseInt(hexStr.substring(i * 2, i * 2 + 1), 16);
			int low = Integer.parseInt(hexStr.substring(i * 2 + 1, i * 2 + 2), 16);
			result[i] = (byte) (high * 16 + low);
		}
		return result;
	}


	//饮食建议
	@RequestMapping(value= "food.html",method=RequestMethod.GET)
	public String food(ModelMap map,@RequestParam(value = "_p") String p,@RequestParam String unionid) {
		UserInfoVo vo= null;

		GlobalMethodUtil util = new GlobalMethodUtil();
		String str = util.decrypt(p);
		Map<String,String> mapStr = util.getParams(str);
		
		String weight=mapStr.get("weight");
		if(mapStr != null) {
			vo=userInfoService.getById(unionid);
		}

		if(vo == null) {
			vo = new UserInfoVo();
		}
		 map.put("weight", weight);
		 map.put("userInfoVo", vo);
		return "health/food";
	}
	
	//运动建议
	@RequestMapping(value= "sport.html",method=RequestMethod.GET)
	public String sport(ModelMap map,@RequestParam(value = "_p") String p,@RequestParam String unionid) {
		UserInfoVo vo=new UserInfoVo();
		GlobalMethodUtil util = new GlobalMethodUtil();
		String str = util.decrypt(p);
		Map<String,String> mapStr = util.getParams(str);
		
		String weight=mapStr.get("weight");
		if(mapStr != null) {
			vo=userInfoService.getById(unionid);
		}

		if(vo == null) {
			vo = new UserInfoVo();
		}

		 map.put("weight", weight);
		 map.put("userInfoVo", vo);
		
		return "health/sport";
	}
	

}
