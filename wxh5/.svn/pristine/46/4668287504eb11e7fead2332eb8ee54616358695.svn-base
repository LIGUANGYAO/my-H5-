
var api = require('../js/funs/api.js')
const formatTime = date => {
  const year = date.getFullYear()
  const month = date.getMonth() + 1
  const day = date.getDate()
  const hour = date.getHours()
  const minute = date.getMinutes()
  const second = date.getSeconds()

  return [year, month, day].map(formatNumber).join('/') + ' ' + [hour, minute, second].map(formatNumber).join(':')
}

const formatNumber = n => {
  n = n.toString()
  return n[1] ? n : '0' + n
}

function getQuery(obj) {
  var str = [];

  for(var k in obj) {
    str.push(k + '=' + encodeURIComponent(obj[k]));
  }

  return str.join('&')
}

function formatDate(input) {
  var d = new Date(input);
  var year = d.getFullYear();
  var month = (d.getMonth() + 1) < 10 ? '0' + (d.getMonth() + 1) : '' + (d.getMonth() + 1);
  var day = d.getDate() < 10 ? '0' + d.getDate() : '' + d.getDate();
  var hour = d.getHours();
  var minutes = d.getMinutes();
  var seconds = d.getSeconds();
  return year + '-' + month + '-' + day;
}

function myInit (app) {
  // var _to = wx.navigateTo;
  // Object.defineProperty(wx, 'navigateTo', {
  //   configurable: true,
  //   writable: true,
  //   enumerable: true,
  // })


  // wx.navigateTo = function (obj) {
  //   wx.setStorage({
  //     key: 'url',
  //     data: obj.url,
  //   })
  //   _to.apply(wx, arguments);
  // }
  wx.onAppRoute(function(e) {

    if (e.openType == 'appLaunch')
    return;

    wx.setStorage({
      key: 'url',
      data: '/' + e.path + '?' + getQuery(e.query),
    })
    wx.setStorage({
      key: 'openType',
      data: e.openType,
    })
  });
  var obj = wx.getStorage({
    key: 'url',
    success: function (res) {

      setTimeout(function () {
        var openType = wx.getStorageSync('openType')

        if (openType == 'navigateBack') {
          openType = 'switchTab'
        }
        if (wx[openType]) {
          wx[openType]({
            url: res.data,
          })
        }
      }, 500)
    },
  })
}

// 计算距离

function Rad(d) {
  return d * Math.PI / 180.0;//经纬度转换成三角函数中度分表形式。
}
//计算距离，参数分别为第一点的纬度，经度；第二点的纬度，经度
function GetDistance(lat1, lng1, lat2, lng2) {
  var radLat1 = Rad(lat1);
  var radLat2 = Rad(lat2);
  var a = radLat1 - radLat2;
  var b = Rad(lng1) - Rad(lng2);
  var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) +
    Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));
  s = s * 6378.137;// EARTH_RADIUS;
  s = Math.round(s * 10000) / 10000 * 1000; //输出为公里
  //s=s.toFixed(4);
  return s;
}

function getP(callback) {
  // 登录
  if (api._p) {

    console.log("p值：" + api._p)
    callback();
    return;
  }
  wx.login({
    success: res => {
      // 发送 res.code 到后台换取 openId, sessionKey, unionId
      var that = getApp();
      if (res.code) {
        console.log('code值:' + res.code);
        //  获取商城名称
        wx.request({
          url: 'http://192.168.1.16:4012/accredit/login',
          data: {
            appid: 'wxe091ea00e3771f2e',
            secret: '6aa85d1d744880d9199a54a93ac7a54b',
            js_code: res.code,
            grant_type: 'authorization_code'
          },
          success: function (res) {

            that.globalData.openid = res.data.openid
            console.log(res)
            var data = {
              appId: 'wxe091ea00e3771f2e',
              openId: res.data.openid
            }
            wx.request({
              url: api.baseUrl + '/encryption/p?' + getQuery(data),
              success: function (res) {
                api._p = '?_p=' + res.data;
                console.log("p值：" + api._p)
                callback();
              }
            })

          },
          fail: function (res) {

          }
        })

      }

    }
  })




  // 获取用户信息
  wx.getSetting({
    success: res => {
      if (res.authSetting['scope.userInfo']) {
        // 已经授权，可以直接调用 getUserInfo 获取头像昵称，不会弹框
        wx.getUserInfo({
          success: res => {
            // 可以将 res 发送给后台解码出 unionId
            this.globalData.userInfo = res.userInfo
            // console.log(this.globalData.userInfo)

            // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回
            // 所以此处加入 callback 以防止这种情况
            if (this.userInfoReadyCallback) {
              this.userInfoReadyCallback(res)
            }
          }
        })
      }
    }
  })
}
module.exports = {
  formatTime: formatTime,
  myInit: myInit,
  getQuery: getQuery,
  formatDate: formatDate,
  GetDistance: GetDistance,
  getP: getP
}

